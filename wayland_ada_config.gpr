abstract project Wayland_Ada_Config is

   for Create_Missing_Dirs use "True";

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("WAYLAND_ADA_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
   for Library_Kind use Library_Type;

   type Compile_Checks_Kind is ("errors", "warnings", "none");
   type Runtime_Checks_Kind is ("all", "overflow", "default", "none");

   type Enabled_Kind is ("enabled", "disabled");

   Compile_Checks   : Compile_Checks_Kind := External ("WAYLAND_ADA_COMPILE_CHECKS", "errors");
   Runtime_Checks   : Runtime_Checks_Kind := External ("WAYLAND_ADA_RUNTIME_CHECKS", "default");
   Style_Checks     : Enabled_Kind        := External ("WAYLAND_ADA_STYLE_CHECKS",   "enabled");
   Contracts_Checks : Enabled_Kind        := External ("WAYLAND_ADA_CONTRACTS",      "enabled");
   Debug_Symbols    : Enabled_Kind        := External ("WAYLAND_ADA_DEBUG_SYMBOLS",  "disabled");

   type Build_Kind is ("debug", "release", "coverage", "profiling");
   Build_Mode : Build_Kind := External ("WAYLAND_ADA_BUILD_MODE", "release");

   Compile_Checks_Switches := ();
   case Compile_Checks is
      when "errors" =>
         compile_checks_switches :=
           ("-gnatwa",  -- all warnings
            "-gnatVa",  -- all validity checks
            "-gnatf",   -- full errors
--            "-gnatwe", -- warnings as errors
            "-gnatwl.s");
      when "warnings" =>
         compile_checks_switches :=
           ("-gnatwa",  -- all warnings
            "-gnatVa",  -- all validity checks
            "-gnatf",   -- full errors
            "-gnatwl.s");
      when "none" => null;
   end case;

   Runtime_Checks_Switches := ();
   case Runtime_Checks is
      when "all"      => Runtime_Checks_Switches := ("-gnato");
      when "overflow" => Runtime_Checks_Switches := ("-gnato", "-gnatp");
      when "default"  => null;
      when "none"     => Runtime_Checks_Switches := ("-gnatp"); -- Supress checks
   end case;

   Style_Checks_Switches := ();
   case Style_Checks is
      when "enabled" =>
         Style_Checks_Switches :=
           ("-gnatyg",   -- GNAT Style checks
            "-gnaty-Is", -- Disable check mode in and separate subprogram spec
            "-gnatyM99", -- Maximum line length
            "-gnatyA",   -- Array attribute indexes
            "-gnatyO");  -- Overriding subprograms explicitly marked as such
      when "disabled" => null;
   end case;

   Contracts_Switches := ();
   case Contracts_Checks is
      when "enabled"  => Contracts_Switches := ("-gnata"); --  Enable assertions and contracts
      when "disabled" => null;
   end case;

   Build_Switches := ();
   case Build_Mode is
      when "release" =>
         Build_Switches := ("-O2",     -- Optimization
                            "-gnatn"); -- Enable inlining
      when "debug" =>
         Build_Switches := ("-Og"); -- No optimization
      when "coverage" =>
         Build_Switches := ("-O0", "--coverage");
      when "profiling" =>
         Build_Switches := ("-pg");
   end case;

   Debug_Switches := ();
   case Debug_Symbols is
      when "enabled"  => Debug_Switches := ("-g");
      when "disabled" => Debug_Switches := ("-fomit-frame-pointer");
   end case;

   package Compiler is
      for Default_Switches ("Ada") use
        Compile_Checks_Switches &
        Debug_Switches &
        Build_Switches &
        Runtime_Checks_Switches &
        Style_Checks_Switches &
        Contracts_Switches &
        ("-march=native",
         "-ffunction-sections",
         "-fdata-sections",
         "-gnatw.X", -- Disable warnings for No_Exception_Propagation
         "-gnatQ");  -- Don't quit. Generate ALI and tree files even if illegalities
      for Local_Configuration_Pragmas use "gnat.adc";
   end Compiler;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

   package Linker is
      for Linker_Options use ("-Wl,-gc-sections");
   end Linker;

end Wayland_Ada_Config;
